Question :
2. What is a virtual function in C++ and how does the compiler handle them?

Answer:
In C++ a virtual function is a kind of member function of a class.
They are declared by ading the word "virtual" before their definition in class.

When we define member functions of a base class and its derived class with the same name, we face a problem when calling the functions after.
Indeed when calling the function with pointer to the base class type, even if we affect adress of the derived class, 
the function from the base class will be called instead of the function from the derived class. 
By default during compile time, the binding is done according to the type of the pointer : hence the base class. 
In order to resolve this problem and be able to call function from derived class with pointer of base class type,
we need to define them as virtual in the base class.
Doing so, the virtual function will be bound during runtime instead of being bound during Compile time,
hence the binding will be done according to the adress where the pointer is pointing instead of the type of the pointer.
In other words the compiler will be checking if same name function exist in derived class.
In order to do so the compiler acts as following:
when a class contains virtual function, an array of pointers pinting to the virtual functions is created.
when creating an object of base class containing virtual function, a virtual pointer is created as member of the base class,
it is pointing to the array of virtual functions pointers.

Example: 

CODE :
//program illustrating the problem when not using virtual function
#include <iostream>
using namespace std;

class Parent {
Public:
  void activity() { cout << "Working\n";}
  virtual void can_drive() { cout << "Is allowed to drive if has license" }
};
class Child : public Parent {
public:
  void activity() { cout << "Playing\n";}
  virtual void can_drive() { cout << "Is not allowed to drive" } 
};

void main()
{
  Parent* pointer; //create a pointer for theclass
  Child Steven; // creating a derived class object
  pointer = &Steven //assigning our pointer to the adress of the created object
  
  pointer ->activity();
  pointer ->can_drive();
}

OUTPUT :
Working
Is not allowed to drive
  
COMMENT : 
the activity function is not virtual, the base class function is called by default
the can_drive function is declared as virtual in the base class, the derived class function will be used if defined.
  
  
